// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model brands {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt // @id = attritube || @db.UnsignedBigInt হল এটি positive হবে nagitave হবে না।
  brandName String     @db.VarChar(50) // string === VARCHAR হয় mysql এ। @db.VarChar সাইজ এ বলে দিব কতটুক হবে এটি।
  brandImg  String     @db.VarChar(300)
  createdAt DateTime   @default(now()) @db.Timestamp(0) // DateTime === TIMESTAMP হয় mysql এ || @db.Timestamp(0) হল prisma এর attritube
  updatedAt DateTime   @default(now()) @updatedAt @db.Timestamp(0) // @updatedAt === auto udate টা গননা করে নিবে।
  products  products[] // Products model এর সাথে relation করার জন্য
}

model categories {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  categoryName String     @db.VarChar(50)
  categoryImg  String     @db.VarChar(300)
  createdAt    DateTime   @default(now()) @db.Timestamp(0)
  updatedAt    DateTime   @default(now()) @updatedAt @db.Timestamp(0)
  products     products[]
}

model products {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  title            String            @db.VarChar(200)
  short_des        String            @db.VarChar(200)
  price            String            @db.VarChar(200)
  discount_price   String            @db.VarChar(200)
  image            String            @db.VarChar(200)
  stock            Boolean
  star             Float
  remark           products_remark // এটি হল enum যা হচ্ছে  fixed কিছু value store করে রাখবে। এবং উক্ত value গুলো ছাড়া অন্যকোন Value insert হবে না।
  category_id      BigInt            @db.UnsignedBigInt
  brand_id         BigInt            @db.UnsignedBigInt
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  brands           brands            @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categories       categories        @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_details  product_details? // one to one relationship make
  product_sliders  product_sliders?
  product_wishs    product_wishs[]
  product_carts    product_carts[]
  proiduct_reviews proiduct_reviews?
}

model product_details {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  img1       String   @db.VarChar(200)
  img2       String   @db.VarChar(200)
  img3       String   @db.VarChar(200)
  img4       String   @db.VarChar(200)
  des        String   @db.LongText
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  product_id BigInt   @unique @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  product    products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_sliders {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  title      String   @db.VarChar(200)
  short_des  String   @db.VarChar(500)
  price      String   @db.VarChar(500)
  image      String   @db.VarChar(500)
  product_id BigInt   @unique @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model users {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  email             String             @unique @db.VarChar(50)
  otp               String             @db.VarChar(16)
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  customer_profiles customer_profiles?
  product_wishs     product_wishs[]
  product_carts     product_carts[]
  invoices          invoices[]
  invoice_products  invoice_products[]
}

model customer_profiles {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  cus_name         String            @unique @db.VarChar(100)
  cus_add          String            @unique @db.VarChar(100)
  cus_city         String            @unique @db.VarChar(100)
  cus_state        String            @unique @db.VarChar(100)
  cus_postcode     String            @unique @db.VarChar(100)
  cus_country      String            @unique @db.VarChar(100)
  cus_phone        String            @unique @db.VarChar(100)
  cus_fax          String            @unique @db.VarChar(100)
  ship_name        String            @unique @db.VarChar(100)
  ship_add         String            @unique @db.VarChar(100)
  ship_city        String            @unique @db.VarChar(100)
  ship_state       String            @unique @db.VarChar(100)
  ship_postcode    String            @unique @db.VarChar(100)
  ship_country     String            @unique @db.VarChar(100)
  ship_phone       String            @unique @db.VarChar(100)
  user_id          BigInt            @unique @db.UnsignedBigInt
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  users            users             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  proiduct_reviews proiduct_reviews?
}

model product_wishs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt   @unique @db.UnsignedBigInt
  user_id    BigInt   @unique @db.UnsignedBigInt
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_carts {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt   @unique @db.UnsignedBigInt
  user_id    BigInt   @unique @db.UnsignedBigInt
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  price      String   @db.VarChar(200)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model proiduct_reviews {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  description      String            @db.VarChar(1000)
  rating           String            @db.VarChar(10)
  customer_id      BigInt            @unique @db.UnsignedBigInt
  product_id       BigInt            @unique @db.UnsignedBigInt
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  cusomer_profiles customer_profiles @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products         products          @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model sslcommerz_account {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  store_id    String   @db.VarChar(255)
  store_pass  String   @db.VarChar(255)
  cuuency     String   @db.VarChar(255)
  success_url String   @db.VarChar(255)
  fail_url    String   @db.VarChar(255)
  cancel_url  String   @db.VarChar(255)
  ipn_url     String   @db.VarChar(255)
  init_url    String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model policies {
  id        BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  type      policies_type
  des       String        @db.LongText
  createdAt DateTime      @default(now()) @db.Timestamp(0)
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamp(0)
}

model invoices {
  id               BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  total            String                   @db.VarChar(50)
  vat              String                   @db.VarChar(50)
  payable          String                   @db.VarChar(50)
  cus_details      String                   @db.VarChar(50)
  ship_details     String                   @db.VarChar(50)
  tran_details     String                   @db.VarChar(50)
  val_details      String                   @db.VarChar(50)
  delivery_status  invoices_delivery_status
  payment_status   String                   @db.VarChar(50)
  user_id          BigInt                   @unique @db.UnsignedBigInt
  createdAt        DateTime                 @default(now()) @db.Timestamp(0)
  updatedAt        DateTime                 @default(now()) @updatedAt @db.Timestamp(0)
  users            users                    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  invoice_products invoice_products[]
}

model invoice_products {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id BigInt   @db.UnsignedBigInt
  product_id BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  qty        String   @db.VarChar(50)
  sale_price String   @db.VarChar(50)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
  invoices   invoices @relation(fields: [invoice_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum policies_type {
  about
  refund
  terms
  how_to_buy
  contact
  complain
}

enum products_remark {
  popular
  new
  top
  special
  tranding
  regular
}

enum invoices_delivery_status {
  pending
  processing
  complated
}
